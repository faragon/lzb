#!/bin/bash
#
# lzb
#
# LZ77 data compression an other utilities in pure Bash language
#
# Based on https://github.com/faragon/libsrt
#
# Copyright (c) 2019 F. Aragon. All rights reserved.
# Released under the BSD 3-Clause License (see the LICENSE file)
#

globals() {
	LC_ALL=C # ANSI C locale (disables Unicode support, ~20% speed-up)
	LZ_BUF_SIZE=16384  # The bigger, the slower, but more compression
	HEX_BUF_SIZE=$((LZ_BUF_SIZE * 2))
	g_out="" # global variable for handling decompression output
	LZOP_BITS=2 ; LZOP_MASK=$(((1 << LZOP_BITS) - 1))
	LZOP_RV_LS_MASK=1 ; LZOP_RV_LS=0 ; LZOP_RV_LV=1 ; LZOP_LV=3
	LZOP_RV_LS_LBITS=2
	LZOP_RV_LS_LMASK=$(((1 << LZOP_RV_LS_LBITS) - 1))
	LZOP_RV_LS_LSHIFT=$LZOP_BITS
	LZOP_RV_LS_LRANGE=$((LZOP_RV_LS_LBITS ? LZOP_RV_LS_LMASK + 1 : 0))
	LZOP_RV_LS_DBITS=$((64 - LZOP_RV_LS_LBITS - LZOP_BITS))
	LZOP_RV_LS_DMASK=$(((1 << LZOP_RV_LS_DBITS) - 1))
	LZOP_RV_LS_DSHIFT=$((LZOP_RV_LS_LBITS + LZOP_BITS))
	LZOP_RV_LS_DRANGE=$((LZOP_RV_LS_DBITS ? LZOP_RV_LS_DMASK + 1 : 0))
	LZOP_BRK_LEN=1000000000000
}

enc_st_lit() {
	local size=$(((${#1}) / 2)) ; local sm1=$(($size - 1))
	st_pk64 $(((sm1 << $LZOP_BITS) | LZOP_LV))
	echo -n $1
}

enc_st_ref() {
	local dm1=$1 lm4=$2
	if ((dm1 < LZOP_RV_LS_DRANGE && lm4 < LZOP_RV_LS_LRANGE)) ; then
		st_pk64 $(((dm1 << LZOP_RV_LS_DSHIFT) | \
			   (lm4 << LZOP_RV_LS_LSHIFT) | LZOP_RV_LS))
	else
		st_pk64 $(((lm4 << LZOP_BITS) | LZOP_RV_LV)) ; st_pk64 $dm1
	fi
}

enc_st_blk_brk() { enc_st_ref 0 $((LZOP_BRK_LEN - 4)) ; }

# Encoding/compression function
lzb_enc() {
	declare -A lut
	local buf clx clxs d1 i l lg last len l1 plit w32
	for ((lg = 0; ; lg=$((lg + l)))) ; do
		# Reset LUT of references and load the buffer
		lut=() ; read -N $HEX_BUF_SIZE buf ; l=${#buf}

		# Input < 8 bytes: store (16 is for the hex representation)
		if ((l < 16)) ; then
			if ((l > 0)) ; then enc_st_lit $buf ; fi ; break ; fi

		# Insert block separator between compressed blocks
		if ((lg > 0)) ; then enc_st_blk_brk ; fi

		lut[${buf:0:8}]=0 # first 32-bit chunk

		# Data compression loop
		smx=$((l - 8))
		for ((i = 8, plit = 0; i <= smx;)) ; do
			w32=${buf:$i:8} # Load 4 bytes (in hex)
			last=$((${lut[$w32]} + 0)) # LUT lookup
			lut[$w32]=$i # LUT update with w32 load index

			# No match: skip byte and continue
			if [[ $w32 != ${buf:$last:8} ]] ; then
				i=$((i + 2)) ; continue ; fi

			# Match: compare to find the longest match
			len=8 ; for clxs in 8192 128 8 ; do
				clx=$((((l - i) / clxs) * clxs))
				for ((; len < clx; len += clxs)) ; do
					if [[ ${buf:$((i + len)):$clxs} != \
					      ${buf:$((last + len)):$clxs} ]]
					then break ; fi ; done ; done
			for ((; len < l; len += 2)) ; do
				if [[ ${buf:$((i + len)):2} != \
				      ${buf:$((last + len)):2} ]] ; then
					break ; fi ; done

			# Avoid encoding short distant references
			l1=$(((len / 2) - 4)) ; d1=$((((i - last) / 2) - 1))

			# Store pending literals
			if ((plit != i)) ; then
				enc_st_lit ${buf:plit:$((i - plit))} ; fi

			# Store reference
			enc_st_ref $d1 $l1 ; i=$((i + len)) ; plit=$i
		done

		# Store pending literals
		if (((l - plit) > 0)) ; then
			enc_st_lit ${buf:plit:$((l - plit))} ; fi
	done
	lut=()
}

reccpy1() {
	local gs0=$((${#g_out} - $1)) i len=$2
	for ((i = 0; i < len; i += 2)) ; do
		g_out+=${g_out:$((gs0 + i)):2} ; done
}

reccpy() { # recursive copy (i.e. allowing references to future data)
	local dist=$1 i n=$2 ; local gs0=$((${#g_out} - $dist))
	if ((dist > n)) ; then g_out+=${g_out:$gs0:$n} # Non-overlapped copy
	else reccpy1 $dist $len ; fi # Overlapped copy
}

dec_ld_ref() {
	local dist=$(($1 * 2)) len=$(($2 * 2)) ; reccpy $dist $len ; }

dec_ld_lit() { # $1: literal count
	local aux ; read -N $(($1 * 2)) aux ; g_out+=$aux ; }

# Decoding/decompression function
lzb_dec() {
	local op len dist
	# Opcode processing loop (literal and reference opcodes)
	for ((;;)) ; do
		op=$(ld_pk64)
		if [ "$op" == "" ] ; then break ; fi
		if (((op & LZOP_MASK) == LZOP_LV)) ; then
			len=$(((op >> LZOP_BITS) + 1))
			#echo "LZOP_LV ($len)" >&2
			dec_ld_lit $len
			continue
		fi
		if (((op & LZOP_RV_LS_MASK) == LZOP_RV_LS)) ; then
			len=$((((op >> LZOP_RV_LS_LSHIFT) & \
				LZOP_RV_LS_LMASK) + 4))
			dist=$((((op >> LZOP_RV_LS_DSHIFT) & \
				 LZOP_RV_LS_DMASK) + 1))
			#echo "LZOP_RV_LS ($dist, $len)" >&2
		else
			# LZOP_RV_LV
			len=$(((op >> LZOP_BITS) + 4))
			dist=$(($(ld_pk64) + 1))
			if ((dist == 1 && len == LZOP_BRK_LEN)) ; then
				echo -n $g_out ; g_out= ; continue
				#echo "LZOP BRK" >&2
			fi
			#echo "LZOP_RV_LV ($dist, $len)" >&2
		fi

		dec_ld_ref $dist $len
	done
	echo -n $g_out ; g_out=
}

# Misc utilities

crc32() {
	local b c=$((0xffffffff))
	while read -N 2 b ; do
		c=$((c ^ 0x$b))
		c=$((((c & 1) * 0xedb88320) ^ (c >> 1)))
		c=$((((c & 1) * 0xedb88320) ^ (c >> 1)))
		c=$((((c & 1) * 0xedb88320) ^ (c >> 1)))
		c=$((((c & 1) * 0xedb88320) ^ (c >> 1)))
		c=$((((c & 1) * 0xedb88320) ^ (c >> 1)))
		c=$((((c & 1) * 0xedb88320) ^ (c >> 1)))
		c=$((((c & 1) * 0xedb88320) ^ (c >> 1)))
		c=$((((c & 1) * 0xedb88320) ^ (c >> 1)))
	done
	printf "%08x\n" $((0xffffffff & ~c))
}

b64_luts() {
	declare -g -A d e
	local c i j=0 p=printf
	for ((i = 65; i <= 90; i++, j++)) ; do
		c=$(st8 $i) ; e[$j]=$c ; d[$($p "\x$c")]=$j ; done
	for ((i = 97; i <= 122; i++, j++)) ; do
		c=$(st8 $i) ; e[$j]=$c ; d[$($p "\x$c")]=$j ; done
	for ((i = 48; i <= 57; i++, j++)) ; do
		c=$(st8 $i) ; e[$j]=$c ; d[$($p "\x$c")]=$j ; done
	for i in 43 47 ; do
		c=$(st8 $i) ; e[$j]=$c ; d[$($p "\x$c")]=$j ; j=$((j+1)) ; done
	d[=]=-1
}

enc_b64() {
	local c ; b64_luts
	while read -N 6 c ; do
		printf "\x${e[$((0x${c:0:2} >> 2))]}"
		printf "\x${e[$(((0x${c:0:2} & 3) << 4 | (0x${c:2:2}) >> 4))]}"
		printf "\x${e[$(((0x${c:2:2} & 15) << 2 | 0x${c:4:2} >> 6))]}"
		printf "\x${e[$((0x${c:4:2} & 0x3f))]}"
	done
	if ((${#c} == 4)) ; then
		printf "\x${e[$((0x${c:0:2} >> 2))]}"
		printf "\x${e[$(((0x${c:0:2} & 3) << 4 | (0x${c:2:2}) >> 4))]}"
		printf "\x${e[$(((0x${c:2:2} & 15) << 2))]}="
	elif ((${#c} == 2)) ; then
		printf "\x${e[$((0x${c:0:2} >> 2))]}"
		printf "\x${e[$(((0x${c:0:2} & 3) << 4))]}=="
	fi
}

dec_b64() {
	local i r s t u ; b64_luts
	while read -N 4 i ; do
		r=${d[${i:0:1}]} ; s=${d[${i:1:1}]}
		t=${d[${i:2:1}]} ; u=${d[${i:3:1}]}
		if ((u >= 0)) ; then
			st8 $((r << 2 | s >> 4)) ; st8 $((s << 4 | t >> 2))
			st8 $(((t << 6) | u)) ; continue
		fi
		st8 $((r << 2 | s >> 4))
		if ((t >= 0)) ; then st8 $((s  << 4 | t >> 2)) ; fi
		break
	done
}

cut() {
	local bs=$((64 * 1024)) off=$(($1 * 2)) size=$((($2 + 0) * 2))
	local sdb=$(((size / bs) * bs)) c i
	if ((off)) ; then read -N $off ; fi
	if ((size == 0)) ; then
		while read -N $bs c ; do echo -n "$c" ; done
		echo -n "$c" ; return ; fi
	for ((i = 0; i < sdb; i+=bs)) ; do
		if ! read -N $bs c ; then echo -n "$c" ; return ; fi
		echo -n "$c" ; done
	i=$((size - i)) ; if ((i)) ; then read -N $i c ; echo -n "$c" ; fi
}

head() { local s=$(($1 + 0)) ; if ((s == 0)) ; then return ; fi ; cut 0 $@ ; }

# Helper functions

st8() { printf %02x $(($1 & 0xff)) ; }
st16() { printf %02x%02x $(($1 & 0xff)) $((($1 >> 8) & 0xff)) ; }
st24() { printf %02x%02x%02x $(($1 & 0xff)) $((($1 >> 8) & 0xff)) \
		$((($1 >> 16) & 0xff)) ; }
st32() { printf %02x%02x%02x%02x $(($1 & 0xff)) $((($1 >> 8) & 0xff)) \
		$((($1 >> 16) & 0xff)) $((($1 >> 24) & 0xff)) ; }
st40() { st8 $(($1 & 0xff)) ; st32 $(($1 >> 8)) ; }
st48() { st16 $(($1 & 0xffff)) ; st32 $(($1 >> 16)) ; }
st56() { st24 $(($1 & 0xffffff)) ; st32 $(($1 >> 24)) ; }
st64() { st32 $(($1 & 0xffffffff)) ; st32 $(($1 >> 32)) ; }
ld8() { echo -n "$((0x${1:0:2}))" ; }
ld16() { echo -n "$((0x${1:2:2}${1:0:2}))" ; }
ld24() { echo -n "$((0x${1:4:2}${1:2:2}${1:0:2}))" ; }
ld32() { echo -n "$((0x${1:6:2}${1:4:2}${1:2:2}${1:0:2}))" ; }
ld40() { echo -n "$((0x${1:8:2}${1:6:2}${1:4:2}${1:2:2}${1:0:2}))" ; }
ld48() { echo -n "$((0x${1:10:2}${1:8:2}${1:6:2}${1:4:2}${1:2:2}${1:0:2}))" ; }
ld56() { echo -n "$((0x${1:12:2}${1:10:2}${1:8:2}${1:6:2}${1:4:2}${1:2:2}${1:0:2}))" ; }
ld64() { echo -n "$((0x${1:14:2}${1:12:2}${1:10:2}${1:8:2}${1:6:2}${1:4:2}${1:2:2}${1:0:2}))" ; }
enc_hex() { local LC_ALL=C IFS=""
	    while read -r -d '' -n 1 c ; do printf "%02x" "'$c" ; done ; }
dec_hex() { while read -d '' -n 2 hl ; do printf "\x$hl" ; done ; }
binop() { enc_hex | $@ | dec_hex ; }
st_pk64() {
	local v=$(($1 + 0))
	if ((v <= 0x7f)) ; then st8 $((v << 1 | 1)) ; return ; fi
	if ((v <= 0x3fff)) ; then st16 $((v << 2 | 2)) ; return ; fi
	if ((v <= 0x1fffff)) ; then st24 $((v << 3 | 4)) ; return ; fi
	if ((v <= 0xfffffff)) ; then st32 $((v << 4 | 8)) ; return ; fi
	if ((v <= 0x7ffffffff)) ; then st40 $((v << 5 | 16)) ; return ; fi
	if ((v <= 0x3ffffffffff)) ; then st48 $((v << 6 | 32)) ; return ; fi
	if ((v <= 0x1ffffffffffff)) ; then st56 $((v << 7 | 64)) ; return ; fi
	st8 128 ; st64 $v
}
sz_pk64() {
	local h=$1
	if ((h & 1)) ; then echo -n 1 ; return ; fi
	if ((h & 2)) ; then echo -n 2 ; return ; fi
	if ((h & 4)) ; then echo -n 3 ; return ; fi
	if ((h & 8)) ; then echo -n 4 ; return ; fi
	if ((h & 16)) ; then echo -n 5 ; return ; fi
	if ((h & 32)) ; then echo -n 6 ; return ; fi
	if ((h & 64)) ; then echo -n 7 ; return ; fi
	if ((h & 128)) ; then echo -n 9 ; return ; fi
	echo -n 0
}
ld_pk64() {
	local a b h ; read -N 2 a ; h=$(ld8 $a)
	case "$(sz_pk64 $h)" in
	1) echo -n $((h >> 1)) ;;
	2) read -N 2 b ; echo -n $(($(ld16 $a$b) >> 2)) ; return ;;
	3) read -N 4 b ; echo -n $(($(ld24 $a$b) >> 3)) ; return ;;
	4) read -N 6 b ; echo -n $(($(ld32 $a$b) >> 4)) ; return ;;
	5) read -N 8 b ; echo -n $(($(ld40 $a$b) >> 5)) ; return ;;
	6) read -N 10 b ; echo -n $(($(ld48 $a$b) >> 6)) ; return ;;
	7) read -N 12 b ; echo -n $(($(ld56 $a$b) >> 7)) ; return ;;
	9) read -N 16 b ; echo -n $(($(ld64 $b))) ; return ;;
	esac
}
show_help() {
	local P IFS='/' ; for P in $1 ; do continue ; done
	echo -e "LZB data compression and other tools" >&2
	echo -e "Copyright (c) 2019 F. Aragon. All rights reserved." >&2
	echo -e "Released under the BSD 3-Clause License" >&2
	echo -e "Syntax: $P [-d|-crc32|-h]\nExamples:" >&2
	echo -e "\tCompress: $P <in >out" >&2
	echo -e "\tDecompress: $P -d <in >out" >&2
	echo -e "\tCRC-32: $P -crc32 <in >out" >&2
	echo -e "\tHex encoding: $P -hex <in >out" >&2
	echo -e "\tHex decoding: $P -dhex <in >out" >&2
	echo -e "\tBase64 encoding: $P -b64 <in >out" >&2
	echo -e "\tBase64 decoding: $P -db64 <in >out" >&2
	echo -e "\t'head' (get first N bytes): $P -head N <in >out" >&2
	echo -e "\t'cut' (skip N bytes, get M bytes): $P -cut N M <in >out" >&2
	echo -e "\tHelp: $P -h" >&2
	echo -e "\tInstallation: sudo cp lzb /usr/local/bin" >&2 ; }
syntax_error() {
	echo "Syntax error (!)" >&2 ; show_help $1 ; }

# main program start

globals

if (($# == 0)) ; then
	binop lzb_enc
else	case $1 in
	-h) show_help $0 ;; -d) binop lzb_dec ;; -crc32) enc_hex | crc32 ;;
	-hex)  enc_hex ;; -dhex) dec_hex ;; -b64)  enc_hex | enc_b64 ;;
	-db64) dec_b64 | dec_hex ;; -cut) binop cut ${@:2} ;;
	-head) binop head ${@:2} ;; *) syntax_error $0
	esac
fi
